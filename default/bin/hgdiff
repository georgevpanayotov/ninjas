#!/usr/bin/python3

import os
import subprocess
import sys
import tempfile


# Input: <REV1> [<REV2> [<PATH>]]
# Input: <REV1> [-- <PATH>]
# Input: [-- <PATH>]

class Args:
    def __init__(self, revs, path):
        self.revs = revs
        self.path = path

    def __str__(self):
        return f"{self.revs} -- {self.path}"


def getArgs(argv):
    i = 1
    revs = []
    while i < len(argv) and argv[i] != "--":
        revs.append(argv[i])

        i = i + 1

    # Skip over the "--"
    i = i + 1

    path = None
    if i < len(argv):
        path = argv[i]

    if i < len(argv) - 1:
        print(f"Unexpected paths[Max 1]: {argv[i + 1:]}")
        return None

    if len(revs) > 2:
        print(f"Unexpected revs[Max 2]: {revs[2:]}.")
        return None

    return Args(revs, path)


class DiffRecord:
    def __init__(self, action, currFile, prevFile):
        self.action = action
        self.currFile = currFile 
        self.prevFile = prevFile 

    def __str__(self):
        return f"{self.action} {self.currFile} {self.prevFile}"


def statusCommand(args):
    pathPart = ""
    if args.path is not None:
        pathPart = f" {args.path}"

    if len(args.revs) == 0:
        return f"hg st -C{pathPart}"
    elif len(args.revs) == 1:
        return f"hg st -C --rev {args.revs[0]}{pathPart}"
    else:
        return f"hg st -C --rev {args.revs[0]}:{args.revs[1]}{pathPart}"


def grabLine(lines, i):
    if i >= len(lines):
        return None
    line = lines[i]
    if len(line) == 0:
        return None

    return line


def hgCatCommand(rev, dirname, filename):
    revName = subprocess.run(f"hg id -i -r {rev}", executable = "/bin/zsh", shell = True,
                   text = True, capture_output = True, check = True)
    revDir = f"{dirname}/{revName.stdout.strip()}"
    os.mkdir(revDir)

    tmpFile = f"{revDir}/{filename}"
    return f"(hg cat -r {rev} {filename} > {tmpFile}); echo {tmpFile}"


def diffCommand(args, dirname, diffRecord):
    # If no revs are specified, we assume that the left rev is the currently checked out rev.
    leftRev = "."
    if len(args.revs) > 0:
        leftRev = args.revs[0]

    # If no second rev is specified, assume that the right rev is the current file state.
    rightFile = diffRecord.currFile
    if len(args.revs) > 1:
        rightFile = f"$({hgCatCommand(args.revs[1], dirname, diffRecord.currFile)})"

    command = None
    if diffRecord.action == "M":
        command = f"vimdiff $({hgCatCommand(leftRev, dirname, diffRecord.currFile)}) {rightFile}"
    elif diffRecord.action == "A" and diffRecord.prevFile is None:
        command = f"vim {rightFile}"
    elif diffRecord.action == "A" and diffRecord.prevFile is not None:
        command = f"vimdiff $({hgCatCommand(leftRev, dirname, diffRecord.prevFile)}) {rightFile}"

    # Allows vim to access to tty so it can render properly.
    if command is not None:
        command = f"{command} < /dev/tty > /dev/tty"

    return command


def main():
    args = getArgs(sys.argv)
    if args is None:
        return

    statusProcess = subprocess.run(statusCommand(args), shell = True, capture_output = True,
                                   check = True, text = True)

    lines = statusProcess.stdout.split('\n')
    records = []

    i = 0
    while i < len(lines):
        line = grabLine(lines, i)
        if line is None:
            i = i + 1
            continue

        if line[0] == "M":
            records.append(DiffRecord("M", line[2:], None))
        elif line[0] == "A":
            nextLine = grabLine(lines, i + 1)

            if nextLine is not None and nextLine[0] != " ":
                nextLine = None

            if nextLine is None:
                records.append(DiffRecord("A", line[2:], None))
            else:
                i = i + 1
                records.append(DiffRecord("A", line[2:], nextLine[2:]))

        i = i + 1

    with tempfile.TemporaryDirectory() as tmpdirname:
        for record in records:
            command = diffCommand(args, tmpdirname, record)
            print(command)
            try:
                subprocess.run(command, executable = "/bin/zsh", shell = True, check = True)
            except subprocess.CalledProcessError:
                # Non-zero exit is a valid way to stop vim. Using it to signify that we're done
                # diffing and exit gracefully.
                print("Editor returned non-zero code. Ending diff.")
                return


if __name__ == "__main__":
    main()
